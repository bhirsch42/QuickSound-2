// Generated by CoffeeScript 1.8.0
(function() {
  var GENRES, INSTRUMENTS, LIMIT, TAGS, addedFileloadListener, counter, createSongEl, displayMatchedSongs, displayPlayingAndPinned, fadeTime, getGenre, getInstruments, getPath, getTags, handleLoadComplete, initSong, initialize, initializedSongs, isPlaying, matchedSongs, musics, pinSong, pinnedSongs, playMusic, playOnly, playRandom, playingSongs, quickShuffle, quickShuffleHelper, quickShuffleOn, searchGenre, searchInstruments, searchName, searchTags, searchTime, smartMatch, songBindings, stopAllMusic, stopMusic, toggleMusic, updateGenreHighlighting, updateInstrumentSearch, updateInstrumentText, updateSearch, updateTagHighlighting, updateTagSearch,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  TAGS = ['Action', 'Aggressive', 'Bouncy', 'Bright', 'Calming', 'Dark', 'Driving', 'Eerie', 'Epic', 'Grooving', 'Humorous', 'Intense', 'Mysterious', 'Mystical', 'Relaxed', 'Somber', 'Suspenseful', 'Unnerving', 'Uplifting'];

  GENRES = ['African', 'Blues', 'Classical', 'Contemporary', 'Disco', 'Electronica', 'Funk', 'Holiday', 'Horror', 'Jazz', 'Latin', 'Modern', 'Musical', 'Polka', 'Pop', 'Reggae', 'Rock', 'Silent Film Score', 'Location', 'Soundtrack', 'Stings', 'Unclassifiable', 'World'];

  INSTRUMENTS = [];

  LIMIT = 20;

  window.songs = {};

  initializedSongs = [];

  musics = {};

  matchedSongs = [];

  pinnedSongs = [];

  playingSongs = [];

  searchTags = [];

  searchInstruments = [];

  searchName = '';

  searchTime = '';

  searchGenre = '';

  $.getJSON('json/scraped_song_data.json', function(data) {
    return initialize(data);
  });

  $.getJSON('json/my_song_data.json', function(data) {
    return initialize(data);
  });

  addedFileloadListener = false;

  initialize = function(data) {
    var instrument, song, _i, _len, _results;
    if (!addedFileloadListener) {
      createjs.Sound.addEventListener('fileload', handleLoadComplete);
      addedFileloadListener = true;
    }
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      song = data[_i];
      songs[song.title] = song;
      if (song.instruments) {
        _results.push((function() {
          var _j, _len1, _ref, _results1;
          _ref = song.instruments;
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            instrument = _ref[_j];
            if (INSTRUMENTS.indexOf(instrument) === -1) {
              _results1.push(INSTRUMENTS.push(instrument));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  handleLoadComplete = function(event) {
    return playMusic(songs[event.id]);
  };

  getPath = function(song) {
    var linkParts;
    linkParts = song.link.split('/');
    return song.link;
  };

  getTags = function(query) {
    var matchedTags, q, tag, _i, _j, _len, _len1, _ref;
    matchedTags = [];
    _ref = query.split(' ');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      q = _ref[_i];
      for (_j = 0, _len1 = TAGS.length; _j < _len1; _j++) {
        tag = TAGS[_j];
        if (!(q.length === 0 || q.length > tag.length) && tag.substring(0, q.length).toUpperCase() === q.toUpperCase() && __indexOf.call(matchedTags, tag) < 0) {
          matchedTags.push(tag);
        }
      }
    }
    return matchedTags;
  };

  getInstruments = function(query) {
    var instrument, matchedInstruments, q, _i, _j, _len, _len1, _ref;
    matchedInstruments = [];
    _ref = query.split(' ');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      q = _ref[_i];
      for (_j = 0, _len1 = INSTRUMENTS.length; _j < _len1; _j++) {
        instrument = INSTRUMENTS[_j];
        if (!(q.length === 0 || q.length > instrument.length) && instrument.substring(0, q.length).toUpperCase() === q.toUpperCase() && __indexOf.call(matchedInstruments, instrument) < 0) {
          matchedInstruments.push(instrument);
        }
      }
    }
    return matchedInstruments;
  };

  getGenre = function(query) {
    var genre, _i, _len;
    for (_i = 0, _len = GENRES.length; _i < _len; _i++) {
      genre = GENRES[_i];
      if (!(query.length === 0 || query.length > genre.length) && genre.substring(0, query.length).toUpperCase() === query.toUpperCase()) {
        return genre;
      }
    }
    return null;
  };

  initSong = function(song) {
    return createjs.Sound.registerSound({
      src: getPath(song),
      id: song.title
    });
  };

  isPlaying = function(song) {
    return playingSongs.indexOf(song) !== -1;
  };

  playMusic = function(song) {
    var _ref;
    if (_ref = song.title, __indexOf.call(initializedSongs, _ref) < 0) {
      initializedSongs.push(song.title);
      initSong(song);
      return;
    }
    if (!isPlaying(song)) {
      playingSongs.push(song);
      displayPlayingAndPinned();
      return SM.playMusic(song.title, 0, fadeTime());
    }
  };

  stopMusic = function(song) {
    if (isPlaying(song)) {
      playingSongs.splice(playingSongs.indexOf(song), 1);
      displayPlayingAndPinned();
      return SM.stopMusic(song.title, fadeTime());
    }
  };

  toggleMusic = function(song) {
    if (!isPlaying(song)) {
      return playMusic(song);
    } else {
      return stopMusic(song);
    }
  };

  stopAllMusic = function() {
    playingSongs = [];
    displayPlayingAndPinned();
    return SM.stopAllMusics(fadeTime());
  };

  playOnly = function(song) {
    if (isPlaying(song)) {
      return stopAllMusic();
    } else {
      stopAllMusic();
      return playMusic(song);
    }
  };

  updateTagSearch = function(tags) {
    var i, match, tag, _i, _len;
    if (searchTags.length + tags.length === 0) {
      return;
    }
    if (searchTags.length === tags.length) {
      match = true;
      for (i = _i = 0, _len = tags.length; _i < _len; i = ++_i) {
        tag = tags[i];
        if (tag !== tags[i]) {
          match = false;
          break;
        }
      }
      if (match) {
        return;
      }
    }
    searchTags = tags;
    return updateSearch();
  };

  updateInstrumentSearch = function(instruments) {
    var i, instrument, match, _i, _len;
    if (searchInstruments.length + instruments.length === 0) {
      return;
    }
    if (searchInstruments.length === instruments.length) {
      match = true;
      for (i = _i = 0, _len = instruments.length; _i < _len; i = ++_i) {
        instrument = instruments[i];
        if (instrument !== instruments[i]) {
          match = false;
          break;
        }
      }
      if (match) {
        return;
      }
    }
    searchInstruments = instruments;
    return updateSearch();
  };

  updateInstrumentText = function(instruments) {
    var el, instrument, instrumentEls, _i, _len, _results;
    instrumentEls = [
      (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = instruments.length; _i < _len; _i++) {
          instrument = instruments[_i];
          _results.push($("<div class=\"tag\">" + instrument + "</div>"));
        }
        return _results;
      })()
    ];
    $('#instrument-text').children().remove();
    _results = [];
    for (_i = 0, _len = instrumentEls.length; _i < _len; _i++) {
      el = instrumentEls[_i];
      _results.push($('#instrument-text').append(el));
    }
    return _results;
  };

  updateSearch = function() {
    var instrument, instrumentMatch, instrumentSongs, key, limit, nameSongs, song, soundtrackSongs, tag, tagMatch, tagSongs, timeSongs, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o;
    matchedSongs = [];
    for (key in songs) {
      song = songs[key];
      matchedSongs.push(song);
    }
    if (searchGenre) {
      soundtrackSongs = [];
      for (_i = 0, _len = matchedSongs.length; _i < _len; _i++) {
        song = matchedSongs[_i];
        if (song['genre'].toUpperCase() === searchGenre.toUpperCase()) {
          soundtrackSongs.push(song);
        }
      }
      matchedSongs = soundtrackSongs;
    }
    if (searchTags) {
      tagSongs = [];
      for (_j = 0, _len1 = matchedSongs.length; _j < _len1; _j++) {
        song = matchedSongs[_j];
        tagMatch = true;
        for (_k = 0, _len2 = searchTags.length; _k < _len2; _k++) {
          tag = searchTags[_k];
          if (__indexOf.call(song.tags, tag) < 0) {
            tagMatch = false;
            break;
          }
        }
        if (tagMatch) {
          tagSongs.push(song);
        }
      }
      matchedSongs = tagSongs;
    }
    if (searchInstruments) {
      instrumentSongs = [];
      for (_l = 0, _len3 = matchedSongs.length; _l < _len3; _l++) {
        song = matchedSongs[_l];
        instrumentMatch = true;
        for (_m = 0, _len4 = searchInstruments.length; _m < _len4; _m++) {
          instrument = searchInstruments[_m];
          if (!song.instruments || __indexOf.call(song.instruments, instrument) < 0) {
            instrumentMatch = false;
            break;
          }
        }
        if (instrumentMatch) {
          instrumentSongs.push(song);
        }
      }
      matchedSongs = instrumentSongs;
    }
    if (searchName) {
      nameSongs = [];
      for (_n = 0, _len5 = matchedSongs.length; _n < _len5; _n++) {
        song = matchedSongs[_n];
        if (smartMatch(song.title)) {
          nameSongs.push(song);
        }
      }
      matchedSongs = nameSongs;
    }
    if (searchTime.length > 0) {
      timeSongs = [];
      for (_o = 0, _len6 = matchedSongs.length; _o < _len6; _o++) {
        song = matchedSongs[_o];
        if (song.time.toUpperCase().indexOf(searchTime.toUpperCase()) !== -1) {
          timeSongs.push(song);
        }
      }
      matchedSongs = timeSongs;
    }
    matchedSongs.sort(function(a, b) {
      return a.title.localeCompare(b.title);
    });
    return displayMatchedSongs(limit = LIMIT);
  };

  createSongEl = function(song) {
    var $song, $template;
    $template = $('#song-template').clone().attr('id', '').removeClass('hidden');
    $song = $template.clone();
    $song.find('.title').html(song.title);
    $song.find('.tags').html(song.tags.join(' '));
    $song.find('input.volume').val(SM.getVolume(song.title));
    if (song.instruments && song.instruments[0] !== ' Listen!') {
      $song.find('.instruments').html(song.instruments.join(' '));
    } else {
      $song.find(':contains(Instruments:)').remove();
    }
    if (song.genre) {
      $song.find('.genre').html(song.genre);
    }
    if (song.time) {
      $song.find('.time').html(song.time);
    }
    return $song;
  };

  displayMatchedSongs = function(limit) {
    var $matchedSongs, i, song, _i, _len;
    if (limit == null) {
      limit = null;
    }
    $matchedSongs = $('#matched-songs');
    $matchedSongs.empty();
    if (matchedSongs.length === 0) {
      $matchedSongs.html('<i>No songs match your search.</i>');
      return;
    }
    for (i = _i = 0, _len = matchedSongs.length; _i < _len; i = ++_i) {
      song = matchedSongs[i];
      if (limit && i === limit) {
        songBindings('#matched-songs');
        return;
      }
      $matchedSongs.append(createSongEl(song));
    }
    return songBindings('#matched-songs');
  };

  displayPlayingAndPinned = function() {
    var $pinnedSongs, i, song, _i, _j, _len, _len1;
    $('.pinned').removeClass('pinned');
    $('.playing').removeClass('playing');
    $pinnedSongs = $('#pinned-songs');
    $pinnedSongs.empty();
    if (pinnedSongs.length === 0 && playingSongs === 0) {
      $pinnedSongs.html('<i>No songs pinned or playing.</i>');
      return;
    }
    for (i = _i = 0, _len = pinnedSongs.length; _i < _len; i = ++_i) {
      song = pinnedSongs[i];
      $pinnedSongs.append(createSongEl(song));
      $('.title:contains(' + song.title + ')').closest('.song').addClass('pinned');
    }
    for (i = _j = 0, _len1 = playingSongs.length; _j < _len1; i = ++_j) {
      song = playingSongs[i];
      if (pinnedSongs.indexOf(song) === -1) {
        $pinnedSongs.append(createSongEl(song));
      }
      $('.title:contains(' + song.title + ')').closest('.song').addClass('playing');
    }
    return songBindings('#pinned-songs');
  };

  songBindings = (function(_this) {
    return function(selector) {
      var $el;
      $el = $(selector);
      $el.find('.play').click(function() {
        var title;
        title = $(this).closest('.song').find('.title').text();
        return playOnly(songs[title]);
      });
      $el.find('.just-play').click(function() {
        var title;
        title = $(this).closest('.song').find('.title').text();
        return toggleMusic(songs[title]);
      });
      $el.find('.pin').click(function() {
        var song, title;
        title = $(this).closest('.song').find('.title').text();
        song = songs[title];
        pinSong(song);
        return displayPlayingAndPinned();
      });
      return $el.find('input.volume').on('input', function() {
        var title;
        title = $(this).closest('.song').find('.title').text();
        return SM.setVolume(title, $(this).val());
      });
    };
  })(this);

  pinSong = function(song) {
    if (pinnedSongs.indexOf(song) !== -1) {
      return pinnedSongs.splice(pinnedSongs.indexOf(song), 1);
    } else {
      return pinnedSongs.push(song);
    }
  };

  updateTagHighlighting = function(tags) {
    var $tag, tag, _i, _len, _ref, _ref1, _results;
    _ref = $('.feel-tag');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tag = _ref[_i];
      $tag = $(tag);
      if (_ref1 = $tag.attr('id'), __indexOf.call(tags, _ref1) >= 0) {
        _results.push($tag.addClass('selected'));
      } else {
        _results.push($tag.removeClass('selected'));
      }
    }
    return _results;
  };

  updateGenreHighlighting = function() {
    var $genre, genreTag, _i, _len, _ref, _results;
    _ref = $('.genre-tag');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      genreTag = _ref[_i];
      $genre = $(genreTag);
      if ($genre.attr('id') === searchGenre || ($genre.attr('id') === 'Silent' && searchGenre === "Silent Film Score")) {
        _results.push($genre.addClass('selected'));
      } else {
        _results.push($genre.removeClass('selected'));
      }
    }
    return _results;
  };

  smartMatch = function(input) {
    var j, matchIndex;
    if (searchName === '') {
      return true;
    }
    matchIndex = 0;
    j = 0;
    while (j < input.length) {
      if (input[j].toUpperCase() === searchName[matchIndex].toUpperCase()) {
        matchIndex++;
      }
      if (matchIndex === searchName.length) {
        return true;
      }
      j++;
    }
    return false;
  };

  fadeTime = function() {
    return $('#crossfade-time').val() * 1000;
  };

  quickShuffleOn = false;

  counter = 0;

  quickShuffle = function() {
    return quickShuffleHelper(45000);
  };

  quickShuffleHelper = function(time) {
    return setTimeout(function() {
      if (!quickShuffleOn) {
        return;
      }
      if (Math.random() < .5) {
        counter++;
        console.log(counter);
        stopAllMusic();
        playRandom();
        setTimeout(function() {
          return stopAllMusic();
        }, 5000);
      }
      return quickShuffleHelper(time);
    }, time);
  };

  playRandom = function() {
    return playOnly(matchedSongs[Math.floor(Math.random() * matchedSongs.length)]);
  };

  window.onload = function() {
    var $keyElements, i, _i, _j, _results;
    updateSearch();
    displayPlayingAndPinned();
    $('.independent-scroll').on('scroll', function() {
      if ($(this).scrollTop() + $(this).innerHeight() >= this.scrollHeight && $('#matched-songs').children().length === LIMIT) {
        return displayMatchedSongs();
      }
    });
    $('#tags').on('input', function() {
      var tags;
      tags = getTags($(this).val());
      updateTagHighlighting(tags);
      return updateTagSearch(tags);
    });
    $('#instruments').on('input', function() {
      var instruments;
      instruments = getInstruments($(this).val());
      updateInstrumentText(instruments);
      return updateInstrumentSearch(instruments);
    });
    $('#genre').on('input', function() {
      var genre;
      genre = getGenre($(this).val());
      searchGenre = genre;
      updateGenreHighlighting();
      return updateSearch();
    });
    $('#name').on('input', function() {
      var name;
      name = $(this).val();
      searchName = name;
      return updateSearch();
    });
    $('#time').on('input', function() {
      searchTime = $(this).val();
      return updateSearch();
    });
    $('#crossfade-time').on('input', function() {
      return $('#crossfade-time-label').html($(this).val());
    });
    $('#clear-pins').click(function() {
      pinnedSongs = [];
      return displayPlayingAndPinned();
    });
    $('#random').click(function(e) {
      if (quickShuffleOn) {
        $(e.target).removeClass('active');
        quickShuffleOn = false;
        return stopAllMusic();
      } else {
        $(e.target).addClass('active');
        quickShuffleOn = true;
        playRandom();
        return quickShuffle();
      }
    });
    $keyElements = $.merge($(document), $('input'));
    $keyElements.bind('keydown', 'return', function(event) {
      playOnly(matchedSongs[0]);
      return event.preventDefault();
    });
    $keyElements.bind('keydown', 'shift+return', function(event) {
      toggleMusic(matchedSongs[0]);
      return event.preventDefault();
    });
    $keyElements.bind('keydown', 'alt+f', function(event) {
      stopAllMusic();
      return event.preventDefault();
    });
    $keyElements.bind('keydown', 'alt+c', function(event) {
      pinnedSongs = [];
      displayPlayingAndPinned();
      return event.preventDefault();
    });
    $keyElements.bind('keydown', 'alt+shift+c', function(event) {
      $('input:not([type=range])').val('');
      searchTags = [];
      searchInstruments = [];
      searchName = '';
      searchTime = '';
      searchGenre = '';
      updateSearch();
      updateTagHighlighting([]);
      updateGenreHighlighting('');
      updateInstrumentText([]);
      return event.preventDefault();
    });
    $keyElements.bind('keydown', 'alt+p', function(event) {
      pinSong(matchedSongs[0]);
      displayPlayingAndPinned();
      return event.preventDefault();
    });
    for (i = _i = 0; _i <= 9; i = ++_i) {
      $keyElements.bind('keydown', 'alt+shift+' + i, function(event) {
        $('#crossfade-time').val(event.keyCode - 48);
        $('#crossfade-time-label').html(event.keyCode - 48);
        return event.preventDefault();
      });
    }
    _results = [];
    for (i = _j = 0; _j <= 9; i = ++_j) {
      _results.push($keyElements.bind('keydown', 'alt+' + i, function(event) {
        var num;
        num = event.keyCode - 48;
        if (num === 0) {
          num = 9;
        } else {
          num--;
        }
        if (num < pinnedSongs.length) {
          playOnly(pinnedSongs[num]);
        }
        return event.preventDefault();
      }));
    }
    return _results;
  };

}).call(this);
